/*
 * Copyright 2015 William Gadney <gadnex@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.binarypaper.barcodescanner.entity;

import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import net.binarypaper.barcodescanner.worker.BarcodeScanner;
import org.eclipse.persistence.jaxb.JAXBContextFactory;
import org.testng.Assert;
import org.testng.annotations.Test;

/**
 *
 * @author William Gadney <gadnex@gmail.com>
 */
public class DocumentNGTest {

    private String marshalDocument(Document document) {
        try {
            JAXBContext jaxbContext = JAXBContextFactory.createContext(new Class[]{Document.class}, null);
            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

            // output pretty printed
            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            // Create a StringWriter
            StringWriter stringWriter = new StringWriter();

            jaxbMarshaller.marshal(document, stringWriter);

            return stringWriter.toString();
        } catch (JAXBException e) {
            e.printStackTrace();
            return null;
        }
    }

    private Document unmarshalDocument(String xml) {
        try {
            JAXBContext jaxbContext = JAXBContextFactory.createContext(new Class[]{Document.class}, null);
            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();

            StringReader stringReader = new StringReader(xml);

            return (Document) jaxbUnmarshaller.unmarshal(stringReader);
        } catch (JAXBException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Test
    public void testXmlFileGeneration() throws JAXBException {
        Document document = new Document();
        document.setFileName("MyDocument.pdf");
        List<Page> pages = new ArrayList<Page>();
        // Page 1
        Page page1 = new Page();
        page1.setPageNumber(1);
        List<Barcode> page1Barcodes = new ArrayList<Barcode>();
        // Page 1 Barcode 1
        Barcode page1Barcode1 = new Barcode();
        page1Barcode1.setType(BarcodeType.QR);
        page1Barcode1.setContent("Page 1 Barcode 1");
        page1Barcodes.add(page1Barcode1);
        // Page 1 Barcode 2
        Barcode page1Barcode2 = new Barcode();
        page1Barcode2.setType(BarcodeType.PDF417);
        page1Barcode2.setContent("Page 1 Barcode 2");
        page1Barcodes.add(page1Barcode2);
        page1.setBarcodes(page1Barcodes);
        pages.add(page1);
        // Page 2
        Page page2 = new Page();
        page2.setPageNumber(2);
        List<Barcode> page2Barcodes = new ArrayList<Barcode>();
        // Page 2 Barcode 1
        Barcode page2Barcode1 = new Barcode();
        page2Barcode1.setType(BarcodeType.QR);
        page2Barcode1.setContent("Page 2 Barcode 1");
        page2Barcodes.add(page2Barcode1);
        // Page 2 Barcode 2
        Barcode page2Barcode2 = new Barcode();
        page2Barcode2.setType(BarcodeType.PDF417);
        page2Barcode2.setContent("<xml>Page 2 Barcode 2 inside an xml tag</xml>");
        page2Barcodes.add(page2Barcode2);
        page2.setBarcodes(page2Barcodes);
        pages.add(page2);
        document.setPages(pages);
        String xml = marshalDocument(document);
        System.out.println(xml);
        Assert.assertTrue(xml.contains("<![CDATA["));
        Document unmarshalledDocument = unmarshalDocument(xml);
        Assert.assertEquals(unmarshalledDocument.getFileName(), "MyDocument.pdf");
        Assert.assertEquals(unmarshalledDocument.getPages().get(0).getBarcodes().get(0).getContent(), "Page 1 Barcode 1");
    }
    
    @Test
    public void testReadTiffBarcodes() throws JAXBException {
        BarcodeScanner barcodeScanner = new BarcodeScanner();
        String xmlString = barcodeScanner.readTiffBarcodes("test.tif", "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");        
        System.out.println(xmlString);
        Assert.assertFalse(xmlString.isEmpty());
    }
}
